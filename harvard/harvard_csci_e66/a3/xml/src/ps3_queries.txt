#
# CSCI E-66: Problem Set 3
# Querying an XML Database
#

########################################################################
# REMEMBER: 
#   1. You should include *both* a query and a print command for each 
#      problem, following the model shown in the sample query below.
#   2. You should *not* include the results of the queries.
#   3. You should test that the queries in this file are correct by
#      executing all of the queries in the file from the command line.
#      See the assignment for more details.
########################################################################

# Do not modify the following line.
openContainer imdb.dbxml

#
# Sample query: Find the names of all movies in the database from 1990.
#
echo "results of sample query"
echo "-----------------------"

query 'for $m in collection("imdb.dbxml")//movie 
       where $m/year = 1990
       return $m/name'
print

echo "------------------\n"

#
# 1. Add your query for this problem in the space provided below.
# Remember to include both a query command and a print command,
# putting them between the second and third echo commands.
#

echo "results of query 1"
echo "------------------"
query 'collection("imdb.dbxml")//person[contains(dob, "04-03")]/name'
print
echo "------------------\n"

#
# 2. Add your query for this problem in the space provided below.
#

echo "results of query 2"
echo "------------------"
query 'for $p in collection("imdb.dbxml")//person
       where $p[contains(dob, "04-03")]
       return <april-third>{$p/name/text()}</april-third>'
print
echo "------------------\n"

#
# 3. Add your query for this problem in the space provided below.
#

echo "results of query 3"
echo "------------------"
query 'for $p in collection("imdb.dbxml")//person
       let $o := collection("imdb.dbxml")//oscar[contains(@person_id, $p/@id)]
       where count($o) = 2 and ($o[1]/year + 1 = $o[2]/year or $o[1]/year - 1 = $o[2]/year)
       return <back-to-back>
              {
                "\n  ", <name>{$p/name/text()}</name>,
                "\n  ", <first-win>{$o[1]/type/text()}</first-win>,
                "\n  ", <second-win>{$o[2]/type/text()}</second-win>, "\n"
              }
              </back-to-back>
       '
print

echo "------------------\n"

#
# 4. Add your query for this problem in the space provided below.
#

echo "results of query 4"
echo "------------------"
query 'for $m in distinct-values(collection("imdb.dbxml")//movie/rating)
       return <rating-info>
       {
           "\n  ", <rating>{$m}</rating>,
           "\n  ", <num-movies>
           {
               let $n := collection("imdb.dbxml")//movie[rating=$m]
               return count($n)
           }
           </num-movies>,
           "\n  ", <avg-runtime>
           {
               let $r := collection("imdb.dbxml")//movie[rating=$m]/runtime
               return avg($r)
           }
           </avg-runtime>
       }
      {
            for $e in collection("imdb.dbxml")//movie[rating=$m]
            let $t := count(collection("imdb.dbxml")//movie[rating=$m])
            where $e/earnings_rank <= 10
            return
              if ($t > 1) then
                  ("\n  ", <top-ten>{$e/name/text()}</top-ten>)
              else
                  <top-ten>{$e/name/text()}</top-ten>

            , "\n"
      }
       </rating-info>'
print


echo "------------------\n"

#
# 5. Add your query for this problem in the space provided below.
# (only required of grad-credit students)
#

echo "results of query 5"
echo "------------------"
query 'for $m in collection("imdb.dbxml")//movie,
           $p in collection("imdb.dbxml")//person
       let $b := tokenize($m/@actors, " "),
           $e := tokenize($m/@directors, " ")
       return
              (for $c in $b,
                    $f in $e
                where $c = $p/@id and $f = $p/@id
                return  <actor-director>{
                        "\n  ", <name>{$p/name}</name>
                        ,"\n  ", <num-acted>
                        {
                            let $s := collection("imdb.dbxml")//movie[contains(@actors, $p/@id)]
                            return count($s)
                        }
                        </num-acted>
                        ,"\n  ", <num-directed>
                        {
                            let $c := collection("imdb.dbxml")//movie[contains(@directors, $p/@id)]
                            return count($c)
                        }
                        </num-directed>
                        }
                        {
                            if ($c = $f) then
                                ("\n  ", <acted-and-directed>{$m/name/text()}</acted-and-directed>, "\n")
                            else
                                "\n"
                        }
                        </actor-director>
              )
              '
print

echo "------------------\n"

#
# 6. Add your query for this problem in the space provided below.
# (only required of grad-credit students)
#

echo "results of query 6"
echo "------------------"
query 'for $p in collection("imdb.dbxml")//person
       let $o := collection("imdb.dbxml")//oscar[@person_id=$p/@id and (type="BEST-ACTOR" or type="BEST-ACTRESS")],
           $m := collection("imdb.dbxml")//movie[contains(@actors, $p/@id)]
       where count($o) >= 2 and count($m[contains($m/@actors, $p/@id)]) >= 6
       return
       <acting-legend>
       {
        "\n  ", <name>{$p/name}</name>,
        "\n  ", <num_movies>{count($m[contains($m/@actors, $p/@id)])}</num_movies>
       }
       {
           for $e in $o,
               $n in $m
           where $n/@id = $e/@movie_id and $p/@id = $e/@person_id
           return ("\n  ", <won-for>{$n/name/text()}</won-for>)
           , "\n"
       }
       </acting-legend>
       '
print

echo "------------------\n"

# Do not modify the following line.
quit
